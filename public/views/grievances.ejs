<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Grievances</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css"
          integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm"
          crossorigin="anonymous">

    <style>
        body {
            background-color: #f0f0f0; /* Set background color */
            font-size: 16px;
        }

        h1 {
            text-align: center; /* Center align h1 */
            color: #000000;
            font-size: 24px; /* Set h1 font size */
            margin-bottom: 20px;
        }

        .table-dark {
            background-color: #FFBB33; /* Set table background color to blue */
            color: rgb(148, 61, 7); /* Set table text color to white */
        }
        .table-dark th {
            color: black; /* Set table heading color to black */
        }
    </style>
</head>
<body>
    <h1>INMATES GRIEVANCES</h1>
    <div class="container mt-3">
        <table class="table table-dark">
            <thead>
                <tr>
                    <th>Sno</th>
                    <th>RollNo</th>
                    <th>Grievance</th>
                    <th>Date</th>
                    <th>Time</th>
                    <th>Status</th>
                    <th>Course</th>
                    <th>Degree</th>
                    <th>Year</th>
                    <th>Action</th> 
                </tr>
            </thead>
            <tbody id="tbody1"></tbody>
        </table>
    </div>
    <script type="module">
        var stdNo = 0;
        var tbody = document.getElementById('tbody1');

        async function resolveGrievance(rollNumber, grievance, date, time, course, degree, year) {
            try {
                const grievanceRef = ref(db, `grievances/${degree}/${course}/${year}`);
                const snapshot = await get(grievanceRef);
                const grievances = snapshot.val();

                for (const groupId in grievances) {
                    const group = grievances[groupId];
                    for (const grievanceId in group) {
                        const griev = group[grievanceId];
                        if (griev.rollNumber === rollNumber &&
                            griev.grievance === grievance &&
                            griev.date === date &&
                            griev.time === time &&
                            griev.status === 'pending') {
                            const grievanceStatusRef = ref(db, `grievances/${degree}/${course}/${year}/${groupId}/${grievanceId}/status`);
                            await set(grievanceStatusRef, 'resolved');
                            return;
                        }
                    }
                }
            } catch (error) {
                console.error('Error resolving grievance:', error);
            }
        }

        function AddItemToTable(sno, rollNumber, grievance, date, time, status, course, degree, year) {
            let trow = document.createElement("tr");
            let td1 = document.createElement('td');
            let td2 = document.createElement('td');
            let td3 = document.createElement('td');
            let td4 = document.createElement('td');
            let td5 = document.createElement('td');
            let td6 = document.createElement('td');
            let td7 = document.createElement('td');
            let td8 = document.createElement('td');
            let td9 = document.createElement('td');
            let td10 = document.createElement('td');
            let resolveBtn = document.createElement('button');

            td1.textContent = sno;
            td2.textContent = rollNumber;
            td3.textContent = grievance;
            td4.textContent = date;
            td5.textContent = time;
            td6.textContent = status;
            td7.textContent = course;
            td8.textContent = degree;
            td9.textContent = year;

            resolveBtn.textContent = "resolved";
            resolveBtn.addEventListener('click', function() {
                resolveGrievance(rollNumber, grievance, date, time, course, degree, year);
                // Update status in the table immediately after resolving
                td6.textContent = 'resolved';
            });

            td10.appendChild(resolveBtn);

            trow.appendChild(td1);
            trow.appendChild(td2);
            trow.appendChild(td3);
            trow.appendChild(td4);
            trow.appendChild(td5);
            trow.appendChild(td6);
            trow.appendChild(td7);
            trow.appendChild(td8);
            trow.appendChild(td9);
            trow.appendChild(td10);

            tbody.appendChild(trow);
        }
        
        import { initializeApp } from "https://www.gstatic.com/firebasejs/10.10.0/firebase-app.js";
        import { getDatabase, ref, get, set } from "https://www.gstatic.com/firebasejs/10.10.0/firebase-database.js";
    
        const firebaseConfig = {
            apiKey: "AIzaSyBj_F96EDsJBBcIrIKAzHD5-JddbHO-ymo",
            authDomain: "hostelzone-1ce77.firebaseapp.com",
            databaseURL: "https://hostelzone-1ce77-default-rtdb.firebaseio.com",
            projectId: "hostelzone-1ce77",
            storageBucket: "hostelzone-1ce77.appspot.com",
            messagingSenderId: "717176220393",
            appId: "1:717176220393:web:9682b0c77e35bb83c75e78",
            measurementId: "G-J8163EFTB8"
        };
    
       // Initialize Firebase
        const firebaseApp = initializeApp(firebaseConfig);
        const db = getDatabase(firebaseApp);
    
        document.addEventListener("DOMContentLoaded", async function() {
            const grievancesContainer = document.getElementById("tbody1");

            try {
                // Clear existing rows
                tbody.innerHTML = "";

                // Fetch list of grievances
                const grievancesSnapshot = await get(ref(db, "grievances"));
                const grievances = grievancesSnapshot.val();

                if (grievances) {
                    let grievancesFound = false; // Flag to check if any grievances are found
                    // Loop through each degree
                    for (const degreeKey in grievances) {
                        const courses = grievances[degreeKey];
                        
                        // Check if there are any grievances for the course
                        if (courses) {
                            const courseHasRequests = Object.values(courses).some(year => {
                                return Object.values(year).some(group => {
                                    return Object.keys(group).length > 0;
                                });
                            });
                            
                            if (courseHasRequests) {
                                // Loop through each course in the degree
                                for (const courseKey in courses) {
                                    const courseGrievancesSnapshot = await get(ref(db, "grievances/" + degreeKey + "/" + courseKey));
                                    const courseGrievances = courseGrievancesSnapshot.val();

                                    // Check if there are any grievances for the course
                                    if (courseGrievances) {
                                        // Loop through each year in the course
                                        for (const yearKey in courseGrievances) {
                                            const year = courseGrievances[yearKey];
                                            
                                            // Loop through each group in the year
                                            for (const groupKey in year) {
                                                const groupGrievances = year[groupKey];
                                                
                                                // Fetch grievances for the group
                                                for (const grievanceId in groupGrievances) {
                                                    const grievance = groupGrievances[grievanceId];
                                                    if (grievance.rollNumber && grievance.grievance && grievance.date && grievance.time && grievance.status && courseKey && degreeKey && yearKey) {
                                                    AddItemToTable(
                                                        ++stdNo,
                                                        grievance.rollNumber,
                                                        grievance.grievance,
                                                        grievance.date,
                                                        grievance.time,
                                                        grievance.status,
                                                        courseKey,
                                                        degreeKey,
                                                        yearKey
                                                    );
                                                    grievancesFound = true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                    // If no grievances found
                    if (!grievancesFound) {
                        grievancesContainer.innerHTML = ""; // Clear the container
                        // Optionally, you can hide the table
                        grievancesContainer.parentNode.style.display = "none";
                    }
                }
            } catch (error) {
                console.error("Error fetching data:", error);
                grievancesContainer.innerHTML = "<tr><td colspan='9'>Error fetching data: " + error.message + "</td></tr>";
            }
        });

    </script>
</body>
</html>
